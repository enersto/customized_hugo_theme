M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("preProcess()<br>nearZeroVar()<br>findCorrelation()<br>findLinearCombos()")
D_Ss("createDataPartition()<br>createTimeSlices()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
Finishs(fit the final model with<br> optimal parameter set)
D_E --> D_S
D_S --> P
P --> M
M --tuning or parameters <br> set changing--> M_E
M_E -- "if largest performance value <br>or smallest mean squared error"--> Finish
M_E -- "if not enough good"--> Retune
Retune -->M
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
Finish --- Finishs
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px,stroke-dasharray: 5, 5
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
style Finish stroke-width:4px
', height =500, width =950
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
Retune[Change tune set <br or turn parameter]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("preProcess()<br>nearZeroVar()<br>findCorrelation()<br>findLinearCombos()")
D_Ss("createDataPartition()<br>createTimeSlices()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
Finishs(fit the final model with<br> optimal parameter set)
D_E --> D_S
D_S --> P
P --> M
M --tuning or parameters <br> set changing--> M_E
M_E -- "if largest performance value <br>or smallest mean squared error"--> Finish
M_E -- "if not enough good"--> Retune
Retune -->M
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
Finish --- Finishs
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px,stroke-dasharray: 5, 5
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
style Finish stroke-width:4px
style Finish stroke-width:4px
', height =500, width =950
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
Retune[Change tune set <br or turn parameter]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("preProcess()<br>nearZeroVar()<br>findCorrelation()<br>findLinearCombos()")
D_Ss("createDataPartition()<br>createTimeSlices()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
Finishs(fit the final model with<br> optimal parameter set)
D_E --> D_S
D_S --> P
P --> M
M --tuning or parameters <br> set changing--> M_E
M_E -- "if largest performance value <br>or smallest mean squared error"--> Finish
M_E -- "if not enough good"--> Retune
Retune -->M
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
Finish --- Finishs
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px,stroke-dasharray: 5, 5
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
style Finish stroke-width:4px
style Retune stroke-width:4px
', height =500, width =950
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
Retune["Change tune set <br or turn parameter"]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("preProcess()<br>nearZeroVar()<br>findCorrelation()<br>findLinearCombos()")
D_Ss("createDataPartition()<br>createTimeSlices()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
Finishs(fit the final model with<br> optimal parameter set)
D_E --> D_S
D_S --> P
P --> M
M --tuning or parameters <br> set changing--> M_E
M_E -- "if largest performance value <br>or smallest mean squared error"--> Finish
M_E -- "if not enough good"--> Retune
Retune -->M
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
Finish --- Finishs
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px,stroke-dasharray: 5, 5
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
style Finish stroke-width:4px
style Retune stroke-width:4px
', height =500, width =950
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
Retune[Turn Parameter]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("preProcess()<br>nearZeroVar()<br>findCorrelation()<br>findLinearCombos()")
D_Ss("createDataPartition()<br>createTimeSlices()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
Finishs(fit the final model with<br> optimal parameter set)
D_E --> D_S
D_S --> P
P --> M
M --tuning or parameters <br> set changing--> M_E
M_E -- "if largest performance value <br>or smallest mean squared error"--> Finish
M_E -- "if not enough good"--> Retune
Retune --> M
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
Finish --- Finishs
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px,stroke-dasharray: 5, 5
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
style Finish stroke-width:4px
style Retune stroke-width:4px
', height =500, width =950
)
set.seed(127)
inTraining <- createDataPartition(Zoo$type, p = .75, list = FALSE)
training <- Zoo[ inTraining,]
testing  <- Zoo[-inTraining,]
View(training)
set.seed(127)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
metric <- "Accuracy"
mtry <- sqrt(ncol(x))
set.seed(127)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
metric <- "Accuracy"
mtry <- sqrt(ncol(training))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(type~., data=training, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
print(rf_default)
sqrt(ncol(training))
expand.grid(.mtry=mtry)
floor(sqrt(ncol(training)))
set.seed(825)
gbmFit1 <- train(type ~ ., data = training,
method = "gbm",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
set.seed(825)
gbmFit1 <- train(type ~ ., data = training,
method = "gbm",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1
set.seed(127)
fitControl <- trainControl(method="repeatedcv", number=10, repeats=3)
metric <- "Accuracy"
mtry <- floor(sqrt(ncol(training)))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(type~., data=training, method="rf", metric=metric, tuneGrid=tunegrid, trControl=fitControl)
print(rf_default)
ggplot(rf_default)
rfClasses <- predict(rf_default, newdata = testing)
rfType <- predict(rf_default, newdata = testing)
confusionMatrix(data = rfType, testing$type)
rfType
rfType <- predict(rf_default, newdata = testing)
confusionMatrix(data = rfType, testing$type)
View(testing)
rf_default
data(oil)
inTrain <- sample(seq(along = fattyAcids), length(fattyAcids)*0.7)
training <- fattyAcids[inTrain,]
str(training)
preProcValues <- preProcess(training, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training)
str(trainTransformed)
names(fattyAcids)
View(fattyAcids)
data(oil)
oilType
fattyAcids <- merge(fattyAcids,oilType)
View(fattyAcids)
unique(fattyAcids$y)
data(oil)
fattyAcids <- merge(fattyAcids,oilType)
fattyAcids <- setDT(fattyAcids)[,y:=
recode(y,c("A", "B","C","D", "E", "F", "G"),
c("pumpkin","sunflower","peanut",
"olive","soybean","rapeseed","corn") )]
data(oil)
fattyAcids <- merge(fattyAcids,oilType)
fattyAcids <- setDT(fattyAcids)[,y:=
dplyr::recode(y,c("A", "B","C","D", "E", "F", "G"),
c("pumpkin","sunflower","peanut",
"olive","soybean","rapeseed","corn") )]
data(oil)
fattyAcids <- merge(fattyAcids,oilType)
fattyAcids <- setDT(fattyAcids)[,y:=
plyr::mapvalue(y,c("A", "B","C","D", "E", "F", "G"),
c("pumpkin","sunflower","peanut",
"olive","soybean","rapeseed","corn") )]
data(oil)
fattyAcids <- merge(fattyAcids,oilType)
fattyAcids <- setDT(fattyAcids)[,y:=
plyr::mapvalues(y,c("A", "B","C","D", "E", "F", "G"),
c("pumpkin","sunflower","peanut",
"olive","soybean","rapeseed","corn") )]
unique(fattyAcids$y)
set.seed(127)
inTraining <- createDataPartition(fattyAcids$y, p = .75, list = FALSE)
training <- fattyAcids[ inTraining,]
testing  <- fattyAcids[-inTraining,]
bootControl <- trainControl(number = 200)
set.seed(127)
svmFit <- train(y~., training,
method = "svmRadial",
tuneLength = 5,
preProc = c("center", "scale"),
trControl = bootControl,
scaled = FALSE)
data(oil)
fattyAcids <- merge(fattyAcids,oilType)
fattyAcids <- setDT(fattyAcids)[,y:=
plyr::mapvalues(y,c("A", "B","C","D", "E", "F", "G"),
c("pumpkin","sunflower","peanut",
"olive","soybean","rapeseed","corn") )]
set.seed(127)
inTraining <- createDataPartition(fattyAcids$y, p = .75, list = FALSE)
training <- fattyAcids[ inTraining,]
testing  <- fattyAcids[-inTraining,]
preProcValues <- preProcess(training, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training)
bootControl <- trainControl(number = 100)
set.seed(127)
svmFit <- train(y~., trainTransformed,
method = "svmRadial",
tuneLength = 5,
preProc = c("center", "scale"),
trControl = bootControl,
scaled = FALSE)
data(oil)
fattyAcids <- merge(fattyAcids,oilType)
fattyAcids <- setDT(fattyAcids)[,y:=
plyr::mapvalues(y,c("A", "B","C","D", "E", "F", "G"),
c("pumpkin","sunflower","peanut",
"olive","soybean","rapeseed","corn") )]
set.seed(127)
inTraining <- createDataPartition(fattyAcids$y, p = .75, list = FALSE)
training <- fattyAcids[ inTraining,]
testing  <- fattyAcids[-inTraining,]
preProcValues <- preProcess(training, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training)
bootControl <- trainControl(number = 100)
set.seed(127)
svmFit <- train(y~., trainTransformed,
method = "svmRadial",
tuneLength = 5,
trControl = bootControl,
scaled = FALSE)
length(oilType)
Desc(fattyAcids$y)
View(fattyAcids)
data(oil)
fattyAcids <- merge(fattyAcids,oilType)
oilType
data(oil)
fattyAcids <- cbind(fattyAcids,oilType)
View(fattyAcids)
fattyAcids <- setDT(fattyAcids)[,y:=
plyr::mapvalues(y,c("A", "B","C","D", "E", "F", "G"),
c("pumpkin","sunflower","peanut",
"olive","soybean","rapeseed","corn") )]
View(fattyAcids)
data(oil)
fattyAcids <- cbind(fattyAcids,oilType)
fattyAcids <- setDT(fattyAcids)[,oilType:=
plyr::mapvalues(oilType,c("A", "B","C","D", "E", "F", "G"),
c("pumpkin","sunflower","peanut",
"olive","soybean","rapeseed","corn") )]
Desc(fattyAcids$oilType)
set.seed(127)
inTraining <- createDataPartition(fattyAcids$oilType, p = .75, list = FALSE)
training <- fattyAcids[ inTraining,]
testing  <- fattyAcids[-inTraining,]
Desc(training$oilType)
bootControl <- trainControl(number = 100)
set.seed(127)
svmFit <- train(oilType~., training,
method = "svmRadial",
tuneLength = 5,
preProc = c("center", "scale"),
trControl = bootControl,
scaled = FALSE)
svmFit
svmFit$finalModel
svmType <- predict(svmFit, newdata = testing)
confusionMatrix(data = svmType, testing$oilType)
svmType
testing$oilType
gbmGrid <- expand.grid(.interaction.depth = (1:5) * 2,
.n.trees = (1:10)*25, .shrinkage = .1)
gbmFit <- train(oilType ~., training,
method = "gbm", trControl = bootControl, verbose = FALSE,preProc = c("center", "scale"),
bag.fraction = 0.5, tuneGrid = gbmGrid)
varImp(svmFit$finalModel)
varImp(svmFit)
svmImp <- varImp(svmFit, scale = FALSE)
plot(simImp)
svmImp <- varImp(svmFit, scale = FALSE)
plot(simImp)
plot(svmImp)
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop("1587417567384")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop("140518633161048")
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
save.image("F:/Schrift/hugo/customized_hugo_theme/.RData")
knitr::opts_chunk$set(echo = TRUE)
loan = fread("C:/Users/pauke/Downloads/loan.csv")
library(data.table)
loan = fread("C:/Users/pauke/Downloads/loan.csv")
loan <- loan[,loan_condition :=
ifelse(loan_status %in% c("Charged Off", "Default",
"Does not meet the credit policy. Status:Charged Off",
"In Grace Period","Late (16-30 days)",
"Late (31-120 days)"),"Bad_Loan","Good_Loan")]
blogdown:::new_post_addin()
Sys.getlocale()
loan = fread("https://www.kaggle.com/wendykan/lending-club-loan-data#loan.csv")
library(data.table)
library(scorecard)
library(caret)
loan = fread("https://www.kaggle.com/wendykan/lending-club-loan-data#loan.csv")
View(loan)
temp <- var_filter(loan)
names(loan)
loan = fread("C:/Users/pauke/Downloads/loan.csv")
names(loan)
View(loan)
loan <- loan[,loan_condition :=
ifelse(loan_status %in% c("Charged Off", "Default",
"Does not meet the credit policy. Status:Charged Off",
"In Grace Period","Late (16-30 days)",
"Late (31-120 days)"),"Bad_Loan","Good_Loan")]
Desc(loan$loan_condition)
library(data.table)
library(scorecard)
library(caret)
library(DescTools)
Desc(loan$loan_condition)
temp <- var_filter(loan,y = "loan_condition")
loan <- loan[,loan_condition :=
ifelse(loan_status %in% c("Charged Off", "Default",
"Does not meet the credit policy. Status:Charged Off",
"In Grace Period","Late (16-30 days)",
"Late (31-120 days)"),"Bad_Loan","Good_Loan")]
loan <- loan[,loan_condition:= factor(loan_condition,levels = c("Good_Loan","Bad_Loan"))]
Desc(loan$loan_condition)
temp <- var_filter(loan,y = "loan_condition")
loan <- loan[,loan_condition :=
ifelse(loan_status %in% c("Charged Off", "Default",
"Does not meet the credit policy. Status:Charged Off",
"In Grace Period","Late (16-30 days)",
"Late (31-120 days)"),"bad","good")]
loan <- loan[,loan_condition:= factor(loan_condition,levels = c("good","bad"))]
Desc(loan$loan_condition)
temp <- var_filter(loan,y = "loan_condition")
names(temp)
names(loan)
names(loan)
names(temp)
Desc(loan$emp_length)
options(scipen = 8)
loan = fread("C:/Users/pauke/Downloads/loan.csv")
loan <- loan[,loan_condition :=
ifelse(loan_status %in% c("Charged Off", "Default",
"Does not meet the credit policy. Status:Charged Off",
"In Grace Period","Late (16-30 days)",
"Late (31-120 days)"),"bad","good")]
loan <- loan[,loan_condition:= factor(loan_condition,levels = c("good","bad"))]
Desc(emp_length~loan_condition,loan)
names(loan)
names(temp)
Desc(loan$purpose)
names(loan)
names(temp)
loan_selected <- var_filter(loan,y = "loan_condition")
Desc(loan$loan_status)
library(data.table)
library(scorecard)
library(caret)
library(DescTools)
options(scipen = 8)
loan = fread("C:/Users/pauke/Downloads/loan.csv")
dev.off()
Desc(loan$loan_status)
loan <- loan[,y :=
ifelse(loan_status %in% c("Charged Off", "Default",
"Does not meet the credit policy. Status:Charged Off",
"In Grace Period","Late (16-30 days)",
"Late (31-120 days)"),"bad","good")]
loan <- loan[,y := factor(y,levels = c("good","bad"))]
Desc(loan$y)
loan_selected <- loan[,c("loan_status","loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","grade","loan_condition")]
loan_selected <- loan[,c("loan_status","loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","grade","y")]
loan_selected <- var_filter(loan_selected,y = "y")
names(loan_selected)
Desc(loan$emp_length)
Desc(emp_length ~ y,loan)
Desc(emp_length ~ y,loan)
ivs <- iv(loan, y = "y")
loan_selected <- loan[,c("loan_status","loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","grade","y")]
ivs <- iv(loan_selected, y = "y")
View(ivs)
View(loan_selected)
loan_selected <- loan[,c("loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","grade","y")]
loan_selected <- var_filter(loan_selected,y = "y")
loan_selected <- loan[,c("loan_status","loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","grade","y")]
ivs <- iv(loan_selected, y = "y")
loan_selected <- loan[,c("loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","grade","y")]
loan_m <- var_filter(loan_selected,y = "y")
names(loan_selected)
Desc(emp_length ~ y,loan_selected)
ivs <- iv(loan_selected, y = "y")
View(ivs)
