#splitting
scatTrain <- scat[ trainIndex,]
library(caret)
library(DescTools)
data(scat)
#set seed and create splitting index
set.seed(3456)
trainIndex <- createDataPartition(scat$Species, p = .8,
list = FALSE,
times = 1)
#the distribution of dependent variables
Desc(scat$Species)
scatTrain <- scat[ trainIndex,]
scatTest  <- scat[-trainIndex,]
Desc(scatTrain$Species)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(DiagrammeR)
library(DescTools)
options(scipen=8)
data(economics)
head(economics)
myTimeControl <- trainControl(method = "timeslice", initialWindow = 36, horizon = 12, fixedWindow = TRUE)
plsFitTime <- train(unemploy ~ pce + pop + psavert, data = economics, method = "pls",
preProc = c("center", "scale"), trControl = myTimeControl)
ggplot(plsFitTime)
ggplot(plsFitTime$results)
plsFitTime
install.packages("mlbench")
library(mlbench)
data(BostonHousing)
testing <- scale(BostonHousing[, c("age", "nox")])
set.seed(5)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet,]
start <- testing[startSet,]
newSamp <- maxDissim(start, samplePool, n = 20)
install.packages("proxy")
data(cars)
View(cars)
names(cars)
testing <- scale(cars[, c("Cylinder", "Doors")])
set.seed(5)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet,]
start <- testing[startSet,]
newSamp <- maxDissim(start, samplePool, n = 20)
head(newSamp)
plot(     testing[-newSamp,],
xlim = extendrange(testing[,1]), ylim = extendrange(testing[,2]),
col = "darkgrey",
xlab = "variable 1", ylab = "variable 2")
points(samplePool, pch = 16, cex = .7)
plot(testing[-newSamp,],
xlim = extendrange(testing[,1]), ylim = extendrange(testing[,2]),
col = "darkgrey",
xlab = "variable 1", ylab = "variable 2")
plot(testing[-newSamp,],
xlim = extendrange(testing[,1]), ylim = extendrange(testing[,2]),
col = "darkgrey",
xlab = "variable 1", ylab = "variable 2")
points(start, pch = 16, cex = .7)
View(testing)
View(testing)
plot(testing[-newSamp,],
xlim = extendrange(testing[,1]), ylim = extendrange(testing[,2]),
col = "darkgrey")
plot(testing[-newSamp,],
xlim =testing[,1], ylim = testing[,2],
col = "darkgrey")
plot(testing[-newSamp,],
xlim =testing[,1], ylim = testing[,2],
col = "darkgrey")
plot(testing[-newSamp,],
col = "darkgrey")
View(testing)
testing <- cars[, c("Cylinder", "Doors")]
set.seed(5)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet,]
start <- testing[startSet,]
newSamp <- maxDissim(start, samplePool, n = 20)
head(newSamp)
plot(testing[-newSamp,],
col = "darkgrey")
points(start, pch = 16, cex = .7)
View(testing)
testing <- scale(cars[, c("Price", "Mileage")])
set.seed(5)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet,]
start <- testing[startSet,]
newSamp <- maxDissim(start, samplePool, n = 20)
head(newSamp)
plot(testing[-newSamp,],
col = "darkgrey")
points(start, pch = 16, cex = .7)
for(i in seq(along = newSamp))
points(
samplePool[newSamp[i],1],
samplePool[newSamp[i],2],
pch = paste(i), col = "darkred")
plot(testing[-newSamp,],
col = "darkgrey")
points(start, pch = 16, cex = .7)
for(i in seq(along = newSamp))
points(
samplePool[newSamp[i],1],
samplePool[newSamp[i],2],
pch = paste(i), col = "darkred")
plot(testing[newSamp,],
col = "darkgrey")
plot(testing[-newSamp,],
col = "darkgrey")
points(start, pch = 16, cex = .7)
for(i in seq(along = newSamp))
points(
samplePool[newSamp[i],1],
samplePool[newSamp[i],2],
pch = paste(i), col = "darkred")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
data("Zoo")
data(etitanic)#earth
head(model.matrix(survived ~ ., data = etitanic))
names(Zoo)
data(Shuttle)
summary(Shuttle)
data("Zoo")
names(Zoo)
rownames(Zoo)
data("Zoo")
names(Zoo)
zoo <- setDT(Zoo)[,animalNames := rownames(Zoo)]
library(data.table)
data("Zoo")
names(Zoo)
zoo <- setDT(Zoo)[,animalNames := rownames(Zoo)]
View(zoo)
rownames(Zoo)
library(data.table)
data("Zoo")
names(Zoo)
Zoo$animalNames <- rownames(Zoo)
View(Zoo)
Desc(Zoo$hair)
Desc(Zoo$type)[[1]][["freq"]]
unique(Zoo$type)
value= unique(Zoo[,c(type)])
value= unique(Zoo[,c(type)])
value= unique(setDT(Zoo)[,c(type)])
Zoo[.(type = value,to = 1:length(value)),on = "type",typeN :=i.to]
value= unique(setDT(Zoo)[,c(type)])
library(data.table)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical
unique(Zoo$type)
## recode
value= unique(Zoo[,c(type)])
library(data.table)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical
unique(Zoo$type)
## recode
value= unique(Zoo$type)
zoo <- setDT(Zoo)[,type:=as.character(type)][.(type = value,to = 1:length(value)),on = "type",typeN :=i.to]
library(data.table)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical
unique(Zoo$type)
## recode
value= unique(Zoo$type)
zoo <- setDT(Zoo)[,type:=as.character(type)][.(type = value,to = 1:length(value)),on = "type",typeN :=i.to]
unique(zoo$typeN)
head(Zoo$type)
library(data.table)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical
unique(Zoo$type)
## recode
value= unique(Zoo$type)
zoo <- setDT(Zoo)[,type:=as.character(type)][.(type = value,to = 1:length(value)),on = "type",typeN :=i.to]
unique(zoo$typeN)
names(zoo)
dummyVars(zoo[,"hair"])
dummyVars(zoo[,c("hair")])
dummyVars(zoo[,c("hair")],zoo)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical variable
unique(Zoo$type)
## recode the categorical variable as numeric
value= unique(Zoo$type)
zoo <- setDT(Zoo)[,type:=as.character(type)][.(type = value,to = 1:length(value)),on = "type",type :=i.to]
unique(zoo$type)
head(model.matrix(type ~ ., data = zoo))
names(zoo)
head(model.matrix(type ~ ., data = zoo[,c(1:8,17)]))
names(zoo)
head(model.matrix(type ~ ., data = zoo[,c(1:4,17)]))
names(zoo)
dummies <- dummyVars(type ~ ., data = zoo[,c(1:4,17)])
head(model.matrix(type ~ ., data = zoo[,c(1:4,17)]))
head(predict(dummies, newdata = zoo))
head(model.matrix(type ~ ., data = zoo[,c(1:4,17)]))
head(predict(dummies, newdata = zoo))
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
head(model.matrix(type ~ ., data = zoo[,c(1:4,17)]))
dummies <- dummyVars(type ~ ., data = zoo[,c(1:4,17)])
library(caret)
library(DiagrammeR)#for the flowchart
library(DescTools)# for summary of data
library(proxy)#maxDissim
library(mlbench)#data zoo
library(data.table)
options(scipen=8)
head(model.matrix(type ~ ., data = zoo[,c(1:4,17)]))
dummies <- dummyVars(type ~ ., data = zoo[,c(1:4,17)])
head(predict(dummies, newdata = zoo))
data(scat)
#set seed and create splitting index
set.seed(3456)
trainIndex <- createDataPartition(scat$Species, p = .8,
list = FALSE,
times = 1)
#the distribution of dependent variables
kable(Desc(scat$Species)[[1]][["freq"]])
data(scat)
#set seed and create splitting index
set.seed(3456)
trainIndex <- createDataPartition(scat$Species, p = .8,
list = FALSE,
times = 1)
#the distribution of dependent variables
kable(Desc(scat$Species)[[1]][["freq"]])
data(scat)
#set seed and create splitting index
set.seed(3456)
trainIndex <- createDataPartition(scat$Species, p = .8,
list = FALSE,
times = 1)
#the distribution of dependent variables
knitr::kable(Desc(scat$Species)[[1]][["freq"]])
data(Sacramento)
View(Sacramento)
Desc(Sacramento$price)
test <- Desc(Sacramento$price)
View(test)
data(mdrr)
View(mdrrDescr)
data(scat)
data(GermanCredit)
Desc(GermanCredit$Amount)
test <- Desc(GermanCredit$Amount)
View(test)
data(occupationalStatus)
force(occupationalStatus)
install.packages("lifecontingencies")
library(lifecontingencies)
data(demoChina)
View(demoChina)
str(mdrrClass)
data(mdrr)
str(mmdrrDescr)
str(mmdrr)
View(mdrrDescr)
install.packages("fastDummies")
library(fastDummies) #for dummy variables
zooDummy <- dummy_cols(data = zoo[,c(1:4,17)])
zooDummy <- dummy_cols(zoo[,c(1:4,17)])
View(zooDummy)
zooDummy <- dummy_cols(Zoo[,c(1:4,17)])
head(zooDummy)
View(Zoo)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
View(Zoo)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical variable
unique(Zoo$type)
## recode the categorical variable as numeric
value= unique(Zoo$type)
zoo <- setDT(Zoo)[,type:=as.character(type)][.(type = value,to = 1:length(value)),on = "type",type :=i.to]
unique(zoo$type)
## dummyVars() in caret
zooDummy <- dummy_cols(Zoo[,c(1:4,17)])
head(zooDummy)
View(Zoo)
## dummyVars() in caret
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
zooDummy <- dummy_cols(Zoo[,c(1:4,17)])
head(zooDummy)
## dummyVars() in caret
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
zooDummy <- dummy_cols(Zoo[,c(1:4,17)])
knitr::kable(head(zooDummy))
summary(GermanCredit)
View(GermanCredit)
install.packages("vcd")
library(vcd)
data(Bundestag2005)
force(Bundestag2005)
data(Bundesliga)
force(Bundesliga)
force(Bundesliga)
str(GermanCredit)
data(GermanCredit)
str(GermanCredit[, 1:10])
caret::data(GermanCredit)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(knitr)
library(caret)
library(DiagrammeR)#for the flowchart
library(DescTools)# for summary of data
library(proxy)#maxDissim
library(mlbench)#data zoo
library(data.table)
library(fastDummies) #for dummy variables
options(scipen=8)
data(GermanCredit)
str(GermanCredit)
data(oil)
View(fattyAcids)
data(oil)
table(oilType)
View(fattyAcids)
Desc(fattyAcids)
names(fattyAcids)
Desc(fattyAcids)
descrCor <- cor(fattyAcids)
summary(descrCor[upper.tri(descrCor)])
View(descrCor)
names(fattyAcids)
ggplot(fattyAcids, aes(Eicosenoic)) +
geom_density()
Desc(fattyAcids$Eicosenoic)
result <- Desc(fattyAcids$Eicosenoic)
View(result)
ggplot(fattyAcids, aes(Eicosenoic)) +
geom_density(adjust = 0.25)
data(oil)
Desc(fattyAcids$Eicosenoic)
fattyAcidsS <- preProcess(fattyAcids, method = c("center", "scale"))
Desc(fattyAcidsS$Eicosenoic)
View(fattyAcidsS)
View(fattyAcidsS)
inTrain <- sample(seq(along = fattyAcids), length(fattyAcids)*0.7)
training <- filteredDescr[inTrain,]
data(oil)
Desc(fattyAcids$Eicosenoic)
inTrain <- sample(seq(along = fattyAcids), length(fattyAcids)*0.7)
training <- fattyAcids[inTrain,]
glimpse(training)
data(oil)
Desc(fattyAcids$Eicosenoic)
inTrain <- sample(seq(along = fattyAcids), length(fattyAcids)*0.7)
training <- fattyAcids[inTrain,]
str(training)
data(oil)
Desc(fattyAcids$Eicosenoic)
inTrain <- sample(seq(along = fattyAcids), length(fattyAcids)*0.7)
training <- fattyAcids[inTrain,]
str(training)
preProcValues <- preProcess(fattyAcids, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training)
data(oil)
inTrain <- sample(seq(along = fattyAcids), length(fattyAcids)*0.7)
training <- fattyAcids[inTrain,]
str(training)
preProcValues <- preProcess(fattyAcids, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training)
str(trainTransformed)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
?preProcess()
?preProcess
??preProcess
descrCor <- cor(fattyAcids)
summary(descrCor[upper.tri(descrCor)])
cor(fattyAcids$IAC, fattyAcids$TIC0)
data(oil)
inTrain <- sample(seq(along = fattyAcids), length(fattyAcids)*0.7)
training <- fattyAcids[inTrain,]
str(training)
preProcValues <- preProcess(training, method = c("center", "scale"))
library(knitr)
library(caret)
library(DiagrammeR)#for the flowchart
library(DescTools)# for summary of data
library(proxy)#maxDissim
library(mlbench)#data zoo
library(data.table)
library(fastDummies) #for dummy variables
options(scipen=8)
data(oil)
inTrain <- sample(seq(along = fattyAcids), length(fattyAcids)*0.7)
training <- fattyAcids[inTrain,]
str(training)
preProcValues <- preProcess(training, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training)
str(trainTransformed)
data(fattyAcids)
descrCor <- cor(fattyAcids)
summary(descrCor[upper.tri(descrCor)])
cor(fattyAcids$IAC, fattyAcids$TIC0)
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
filteredDescr <- filteredDescr[,-highlyCorDescr]
data(fattyAcids)
descrCor <- cor(fattyAcids)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
fattyAcids <- fattyAcids[,-highlyCorDescr]
descrCor2 <- cor(fattyAcids)
summary(descrCor2[upper.tri(descrCor2)])
cor(fattyAcids$IAC, fattyAcids$TIC0)
CUTOFF <- 0.90
cor_matrix <- cor(fattyAcids)
cor_high <- findCorrelation(cor_matrix, CUTOFF)
high_cor_remove <- row.names(cor_matrix)[cor_high]
head(high_cor_remove, 8)
cor_high
cor_matrix
CUTOFF <- 0.57
cor_matrix <- cor(fattyAcids)
cor_high <- findCorrelation(cor_matrix, CUTOFF)
high_cor_remove <- row.names(cor_matrix)[cor_high]
head(high_cor_remove, 8)
data("Zoo")
View(Zoo)
View(Zoo)
cor(Zoo[,-17])
descrCor <- cor(Zoo[,-17])
summary(descrCor[upper.tri(descrCor)])
data(Zoo)
descrCor <- cor(Zoo[,-17])
summary(descrCor[upper.tri(descrCor)])
CUTOFF <- 0.85
cor_matrix <- cor(Zoo[,-17])
cor_high <- findCorrelation(cor_matrix, CUTOFF)
high_cor_remove <- row.names(cor_matrix)[cor_high]
head(high_cor_remove, 8)
CUTOFF <- 0.85
cor_matrix <- cor(Zoo[,-17])
cor_high <- findCorrelation(cor_matrix, CUTOFF)
high_cor_remove <- row.names(cor_matrix)[cor_high]
head(high_cor_remove, 8)
removingCor <- Zoo[,-high_cor_remove]
high_cor_remove
removingCorZoo <- Zoo[,-c(high_cor_remove)]
high_cor_remove
names(Zoo)
Zoo[,high_cor_remove]
str(Zoo)
removingCorZoo <- Zoo[,-high_cor_remove]
str(Zoo)
findLinearCombos(Zoo[,-17])
findLinearCombos(cor_matrix)
cor_matrix
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("preProcess()<br>nearZeroVar()<br>findCorrelation()<br>findLinearCombos()")
D_Ss("createDataPartition()<br>createTimeSlices()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> D_S
D_S --> P
P --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px,stroke-dasharray: 5, 5
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
', height =500, width =950
)
