DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("nearZeroVar()<br>findCorrelation()<br>findLinearCombos()<br>preprocess()")
D_Ss("createDataPartition()<br>createFolds()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> P
P --> D_S
D_S --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
style D_E stroke-width:4px,font-style:bold
style P stroke-width:4px
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
classDef default fill:#ccf,stroke:#333,stroke-width:4px
', height =500, width =1000
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("nearZeroVar()<br>findCorrelation()<br>findLinearCombos()<br>preprocess()")
D_Ss("createDataPartition()<br>createFolds()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> P
P --> D_S
D_S --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
classDef default fill:#669999,stroke:#333,stroke-width:2px
style D_E stroke-width:4px,font-style:bold
style P stroke-width:4px
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
', height =500, width =1000
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("nearZeroVar()<br>findCorrelation()<br>findLinearCombos()<br>preprocess()")
D_Ss("createDataPartition()<br>createFolds()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> P
P --> D_S
D_S --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px,font-size = 16px
style D_E stroke-width:4px,font-style:bold
style P stroke-width:4px
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
', height =500, width =1000
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("nearZeroVar()<br>findCorrelation()<br>findLinearCombos()<br>preprocess()")
D_Ss("createDataPartition()<br>createFolds()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> P
P --> D_S
D_S --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px,font-style:bold
style P stroke-width:4px
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
', height =500, width =1000
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("nearZeroVar()<br>findCorrelation()<br>findLinearCombos()<br>preprocess()")
D_Ss("createDataPartition()<br>createFolds()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> P
P --> D_S
D_S --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px,font-style:bold
style D_E stroke-width:4px
style P stroke-width:4px
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
', height =500, width =1000
)
grViz("
digraph dot {
graph [layout = dot]
node [shape = circle,
style = filled,
color = grey,
label = '']
node [fillcolor = red]
a
node [fillcolor = green]
b c d
node [fillcolor = orange]
edge [color = grey]
a -> {b c d}
b -> {e f g h i j}
c -> {k l m n o p}
d -> {q r s t u v}
}")
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("nearZeroVar()<br>findCorrelation()<br>findLinearCombos()<br>preprocess()")
D_Ss("createDataPartition()<br>createFolds()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> P
P --> D_S
D_S --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
.DiagrammeR g .label { font-family: Helvetica; font-size: 14px; color: rgb(51, 51, 51); }
', height =500, width =950
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("nearZeroVar()<br>findCorrelation()<br>findLinearCombos()<br>preprocess()")
D_Ss("createDataPartition()<br>createFolds()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> P
P --> D_S
D_S --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
', height =500, width =950
)
install.packages(c("AppliedPredictiveModeling", "earth"))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(DiagrammeR)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("nearZeroVar()<br>findCorrelation()<br>findLinearCombos()<br>preprocess()")
D_Ss("createDataPartition()<br>createFolds()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> D_S
D_S --> P
P --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
', height =500, width =950
)
DiagrammeR::mermaid('
graph LR
D_E[Data Exploration/Visualization]
P[Preprocessing]
D_S[Data Splitting]
M[Modeling]
M_E[Model Evaluation]
D_Es("featureplot()<br>dotPlot()<br>lift()<br>plotClassProbs()")
Ps("nearZeroVar()<br>findCorrelation()<br>findLinearCombos()<br>preprocess()")
D_Ss("createDataPartition()<br>createFolds()")
Ms("train()<br>trainControl()")
M_Es("confusionMatrix()<br>resample()<br>postResample()")
D_E --> D_S
D_S --> P
P --> M
M --> M_E
D_E --- D_Es
P --- Ps
D_S --- D_Ss
M --- Ms
M_E --- M_Es
classDef default fill:#ffffe6,stroke:#333,stroke-width:2px
style D_E stroke-width:4px
style P stroke-width:4px,stroke-dasharray: 5, 5
style D_S stroke-width:4px
style M stroke-width:4px
style M_E stroke-width:4px
', height =500, width =950
)
data(iris)
force(iris)
View(iris)
data(data)
data("cars")
View(cars)
View(cars)
data(scat)
Desc(scat$Species)
library(DescTools)
Desc(scat$Species)
#splitting
scatTrain <- scat[ trainIndex,]
library(caret)
library(DescTools)
data(scat)
#set seed and create splitting index
set.seed(3456)
trainIndex <- createDataPartition(scat$Species, p = .8,
list = FALSE,
times = 1)
#the distribution of dependent variables
Desc(scat$Species)
scatTrain <- scat[ trainIndex,]
scatTest  <- scat[-trainIndex,]
Desc(scatTrain$Species)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(DiagrammeR)
library(DescTools)
options(scipen=8)
data(economics)
head(economics)
myTimeControl <- trainControl(method = "timeslice", initialWindow = 36, horizon = 12, fixedWindow = TRUE)
plsFitTime <- train(unemploy ~ pce + pop + psavert, data = economics, method = "pls",
preProc = c("center", "scale"), trControl = myTimeControl)
ggplot(plsFitTime)
ggplot(plsFitTime$results)
plsFitTime
install.packages("mlbench")
library(mlbench)
data(BostonHousing)
testing <- scale(BostonHousing[, c("age", "nox")])
set.seed(5)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet,]
start <- testing[startSet,]
newSamp <- maxDissim(start, samplePool, n = 20)
install.packages("proxy")
data(cars)
View(cars)
names(cars)
testing <- scale(cars[, c("Cylinder", "Doors")])
set.seed(5)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet,]
start <- testing[startSet,]
newSamp <- maxDissim(start, samplePool, n = 20)
head(newSamp)
plot(     testing[-newSamp,],
xlim = extendrange(testing[,1]), ylim = extendrange(testing[,2]),
col = "darkgrey",
xlab = "variable 1", ylab = "variable 2")
points(samplePool, pch = 16, cex = .7)
plot(testing[-newSamp,],
xlim = extendrange(testing[,1]), ylim = extendrange(testing[,2]),
col = "darkgrey",
xlab = "variable 1", ylab = "variable 2")
plot(testing[-newSamp,],
xlim = extendrange(testing[,1]), ylim = extendrange(testing[,2]),
col = "darkgrey",
xlab = "variable 1", ylab = "variable 2")
points(start, pch = 16, cex = .7)
View(testing)
View(testing)
plot(testing[-newSamp,],
xlim = extendrange(testing[,1]), ylim = extendrange(testing[,2]),
col = "darkgrey")
plot(testing[-newSamp,],
xlim =testing[,1], ylim = testing[,2],
col = "darkgrey")
plot(testing[-newSamp,],
xlim =testing[,1], ylim = testing[,2],
col = "darkgrey")
plot(testing[-newSamp,],
col = "darkgrey")
View(testing)
testing <- cars[, c("Cylinder", "Doors")]
set.seed(5)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet,]
start <- testing[startSet,]
newSamp <- maxDissim(start, samplePool, n = 20)
head(newSamp)
plot(testing[-newSamp,],
col = "darkgrey")
points(start, pch = 16, cex = .7)
View(testing)
testing <- scale(cars[, c("Price", "Mileage")])
set.seed(5)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet,]
start <- testing[startSet,]
newSamp <- maxDissim(start, samplePool, n = 20)
head(newSamp)
plot(testing[-newSamp,],
col = "darkgrey")
points(start, pch = 16, cex = .7)
for(i in seq(along = newSamp))
points(
samplePool[newSamp[i],1],
samplePool[newSamp[i],2],
pch = paste(i), col = "darkred")
plot(testing[-newSamp,],
col = "darkgrey")
points(start, pch = 16, cex = .7)
for(i in seq(along = newSamp))
points(
samplePool[newSamp[i],1],
samplePool[newSamp[i],2],
pch = paste(i), col = "darkred")
plot(testing[newSamp,],
col = "darkgrey")
plot(testing[-newSamp,],
col = "darkgrey")
points(start, pch = 16, cex = .7)
for(i in seq(along = newSamp))
points(
samplePool[newSamp[i],1],
samplePool[newSamp[i],2],
pch = paste(i), col = "darkred")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
data("Zoo")
data(etitanic)#earth
head(model.matrix(survived ~ ., data = etitanic))
names(Zoo)
data(Shuttle)
summary(Shuttle)
data("Zoo")
names(Zoo)
rownames(Zoo)
data("Zoo")
names(Zoo)
zoo <- setDT(Zoo)[,animalNames := rownames(Zoo)]
library(data.table)
data("Zoo")
names(Zoo)
zoo <- setDT(Zoo)[,animalNames := rownames(Zoo)]
View(zoo)
rownames(Zoo)
library(data.table)
data("Zoo")
names(Zoo)
Zoo$animalNames <- rownames(Zoo)
View(Zoo)
Desc(Zoo$hair)
Desc(Zoo$type)[[1]][["freq"]]
unique(Zoo$type)
value= unique(Zoo[,c(type)])
value= unique(Zoo[,c(type)])
value= unique(setDT(Zoo)[,c(type)])
Zoo[.(type = value,to = 1:length(value)),on = "type",typeN :=i.to]
value= unique(setDT(Zoo)[,c(type)])
library(data.table)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical
unique(Zoo$type)
## recode
value= unique(Zoo[,c(type)])
library(data.table)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical
unique(Zoo$type)
## recode
value= unique(Zoo$type)
zoo <- setDT(Zoo)[,type:=as.character(type)][.(type = value,to = 1:length(value)),on = "type",typeN :=i.to]
library(data.table)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical
unique(Zoo$type)
## recode
value= unique(Zoo$type)
zoo <- setDT(Zoo)[,type:=as.character(type)][.(type = value,to = 1:length(value)),on = "type",typeN :=i.to]
unique(zoo$typeN)
head(Zoo$type)
library(data.table)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical
unique(Zoo$type)
## recode
value= unique(Zoo$type)
zoo <- setDT(Zoo)[,type:=as.character(type)][.(type = value,to = 1:length(value)),on = "type",typeN :=i.to]
unique(zoo$typeN)
names(zoo)
dummyVars(zoo[,"hair"])
dummyVars(zoo[,c("hair")])
dummyVars(zoo[,c("hair")],zoo)
data("Zoo")
Zoo$animalNames <- rownames(Zoo)
#categorical variable
unique(Zoo$type)
## recode the categorical variable as numeric
value= unique(Zoo$type)
zoo <- setDT(Zoo)[,type:=as.character(type)][.(type = value,to = 1:length(value)),on = "type",type :=i.to]
unique(zoo$type)
head(model.matrix(type ~ ., data = zoo))
names(zoo)
head(model.matrix(type ~ ., data = zoo[,c(1:8,17)]))
names(zoo)
head(model.matrix(type ~ ., data = zoo[,c(1:4,17)]))
names(zoo)
dummies <- dummyVars(type ~ ., data = zoo[,c(1:4,17)])
head(model.matrix(type ~ ., data = zoo[,c(1:4,17)]))
head(predict(dummies, newdata = zoo))
head(model.matrix(type ~ ., data = zoo[,c(1:4,17)]))
head(predict(dummies, newdata = zoo))
