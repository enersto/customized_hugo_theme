m_rf <- randomForest(y ~ ., data = train_woe)
m_rf <- randomForest(as.factor(y) ~ ., data = train_woe)
memory.limit()
m_rf <-  train( as.factor(y) ~ ., data=train_woe,method="ranger",
trControl=fitControl)
library(data.table)
library(scorecard)
library(caret)
library(DescTools)
options(scipen = 8)
loan = fread("C:/Users/pauke/Downloads/loan.csv")
loan <- loan[,y :=
ifelse(loan_status %in% c("Charged Off", "Default",
"Does not meet the credit policy. Status:Charged Off",
"In Grace Period","Late (16-30 days)",
"Late (31-120 days)"),"bad","good")]
loan <- loan[,y := factor(y,levels = c("good","bad"))]
knitr::kable(Desc(loan$y)[[1]][["freq"]])
loan_selected <- loan[,c("loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","grade","y")]
loan_m <- var_filter(loan_selected,y = "y")
names(loan_selected)
trainIndex <- createDataPartition(loan_m$y, p = .13,
list = FALSE,
times = 1)
loan_mp <- loan_m[trainIndex,]
bin <- woebin(loan_mp, y = "y",method = "chimerge")
#分箱和具体的切分情况示例
bin$annual_inc
break_adj = list(
loan_amnt=c(8500,14000,20500))
bins_adj = woebin(
loan_mp, y="y",
breaks_list=break_adj,
print_step=0)
woebin_plot(bins_adj$loan_amnt)
set.seed(6715)
trainIndex <- createDataPartition(loan_mp$y, p = .8,
list = FALSE,
times = 1)
loan_mTrain <- loan_mp[ trainIndex,]
loan_mTest  <- loan_mp[-trainIndex,]
knitr::kable(Desc(loan_mTrain$y)[[1]][["freq"]])
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
trainIndex <- createDataPartition(loan_m$y, p = .15,
list = FALSE,
times = 1)
loan_mp <- loan_m[trainIndex,]
bin <- woebin(loan_mp, y = "y",method = "chimerge")
#分箱和具体的切分情况示例
bin$annual_inc
woebin_plot(bin$loan_amnt)
break_adj = list(
loan_amnt=c(8500,14000,20500))
bins_adj = woebin(
loan_mp, y="y",
breaks_list=break_adj,
print_step=0)
woebin_plot(bins_adj$loan_amnt)
set.seed(6715)
trainIndex <- createDataPartition(loan_mp$y, p = .8,
list = FALSE,
times = 1)
loan_mTrain <- loan_mp[ trainIndex,]
loan_mTest  <- loan_mp[-trainIndex,]
knitr::kable(Desc(loan_mTrain$y)[[1]][["freq"]])
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
names(loan)
Desc(loan$pymnt_plan)
names(loan)
Desc(loan$grade)
View(loan_mTrain)
library(corrplot)
cor1 = cor(train_woe)
corrplot.mixed(cor1,  number.cex = .7)
cor1 = cor(train_woe)
corrplot.mixed(cor1,  number.cex = .7)
names(loan)
Desc(loan$open_acc)
Desc(loan$hardship_flag)
names(loan)
Desc(loan$total_acc)
Desc(loan$delinq_2yrs)
Desc(loan$delinq_amnt)
Desc(loan$delinq_2yrs)
Desc(delinq_2yrs ~ y,loan)
Desc(open_acc ~ y,loan)
Desc(mort_acc ~ y,loan)
names(loan)
Desc(out_prncp ~ y,loan)
loan_selected <- loan[,c("loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","open_acc","y")]
loan_m <- var_filter(loan_selected,y = "y")
names(loan_selected)
Desc(loan_selected$emp_length)
ivs <- iv(loan_selected, y = "y")
ivs[variable=="emp_length",]
View(ivs)
trainIndex <- createDataPartition(loan_m$y, p = .15,
list = FALSE,
times = 1)
loan_mp <- loan_m[trainIndex,]
bin <- woebin(loan_mp, y = "y",method = "chimerge")
#分箱和具体的切分情况示例
bin$annual_inc
woebin_plot(bin$loan_amnt)
break_adj = list(
loan_amnt=c(8500,14000,20500))
bins_adj = woebin(
loan_mp, y="y",
breaks_list=break_adj,
print_step=0)
woebin_plot(bins_adj$loan_amnt)
set.seed(6715)
trainIndex <- createDataPartition(loan_mp$y, p = .85,
list = FALSE,
times = 1)
loan_mTrain <- loan_mp[ trainIndex,]
loan_mTest  <- loan_mp[-trainIndex,]
knitr::kable(Desc(loan_mTrain$y)[[1]][["freq"]])
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
cor1 = cor(train_woe)
corrplot.mixed(cor1,  number.cex = .7)
View(loan_mp)
View(loan_mp)
View(loan_m)
loan_selected <- loan[,c("loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","open_acc","y")]
loan_m <- var_filter(loan_selected,y = "y")
names(loan_selected)
names(loan_m)
Desc(revol_bal ~ y,loan)
loan_selected <- loan[,c("loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","revol_bal","y")]
loan_m <- var_filter(loan_selected,y = "y")
names(loan_m)
Desc(loan_selected$emp_length)
ivs <- iv(loan_selected, y = "y")
ivs[variable=="emp_length",]
View(ivs)
trainIndex <- createDataPartition(loan_m$y, p = .15,
list = FALSE,
times = 1)
loan_mp <- loan_m[trainIndex,]
bin <- woebin(loan_mp, y = "y",method = "chimerge")
#分箱和具体的切分情况示例
bin$annual_inc
break_adj = list(
loan_amnt=c(8500,14000,20500))
bins_adj = woebin(
loan_mp, y="y",
breaks_list=break_adj,
print_step=0)
woebin_plot(bins_adj$loan_amnt)
set.seed(6715)
trainIndex <- createDataPartition(loan_mp$y, p = .85,
list = FALSE,
times = 1)
loan_mTrain <- loan_mp[ trainIndex,]
loan_mTest  <- loan_mp[-trainIndex,]
knitr::kable(Desc(loan_mTrain$y)[[1]][["freq"]])
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
cor1 = cor(train_woe)
corrplot.mixed(cor1,  number.cex = .7)
Desc(acc_now_delinq ~ y,loan)
names(loan)
Desc(out_prncp ~ y,loan)
fitControl <- trainControl(method='cv', number=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
# 1,0的y值模式在caret里无法进行
train_woe <- train_woe[,y := ifelse(y ==1,"good","bad")]
test_woe <- test_woe[,y := ifelse(y ==1,"good","bad")]
# glm
m_glm <- train(y ~ ., data=train_woe,method="glm",family="binomial",
trControl=fitControl,metric = "ROC")
summary(m_glm)
# gbm (Gradient Boosting Machine)
m_gbm <- train(y ~ ., data=train_woe,method="gbm",
trControl=fitControl,metric = "ROC")
summary(m_gbm)
m_gbm
result <- resamples(list(glm = m_glm,gbm = m_gbm))
result$values
bwplot(result, metric="Sens")
bwplot(result, metric="ROC")
View(train_woe)
rfGrid <- expand.grid(mtry = seq(from = 3, to = 18, by = 3))
rfControl <- trainControl(method = "cv", number = 3, repeats = 2,
classProbs = TRUE, summaryFunction = twoClassSummary)
m_rf <- train(train_woe[,-1], train_woe$y,
method="rf",
ntree=100,
importance=TRUE,
na.action=na.omit,
tuneGrid = rfGrid,
trControl= rfControl,
metric = "Sens",
allowParallel=TRUE)
summary(m_rf)
result <- resamples(list(glm = m_glm,gbm = m_rf))
bwplot(result, metric="Sens")
result <- resamples(list(glm = m_glm,rf = m_rf))
result$values
bwplot(result, metric="Sens")
bwplot(result, metric="ROC"
install.packages("psych")
options(scipen = 8)
loan = fread("C:/Users/pauke/Downloads/loan.csv")
library(data.table)
library(scorecard)
library(caret)
library(DescTools)
options(scipen = 8)
loan = fread("C:/Users/pauke/Downloads/loan.csv")
loan <- loan[,y :=
ifelse(loan_status %in% c("Charged Off", "Default",
"Does not meet the credit policy. Status:Charged Off",
"In Grace Period","Late (16-30 days)",
"Late (31-120 days)"),"bad","good")]
loan <- loan[,y := factor(y,levels = c("good","bad"))]
knitr::kable(Desc(loan$y)[[1]][["freq"]])
names(loan)
Desc(out_prncp ~ y,loan)
loan_selected <- loan[,c("loan_amnt","int_rate","dti",
"purpose","term","annual_inc","home_ownership","emp_length","revol_bal","y")]
loan_m <- var_filter(loan_selected,y = "y")
names(loan_m)
trainIndex <- createDataPartition(loan_m$y, p = .15,
list = FALSE,
times = 1)
loan_mp <- loan_m[trainIndex,]
break_adj = list(
loan_amnt=c(8500,14000,20500))
bins_adj = woebin(
loan_mp, y="y",
breaks_list=break_adj,
print_step=0)
woebin_plot(bins_adj$loan_amnt)
set.seed(6715)
trainIndex <- createDataPartition(loan_mp$y, p = .85,
list = FALSE,
times = 1)
loan_mTrain <- loan_mp[ trainIndex,]
loan_mTest  <- loan_mp[-trainIndex,]
knitr::kable(Desc(loan_mTrain$y)[[1]][["freq"]])
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
set.seed(1)
nn.seeds <- vector(mode = "list", length = 11) # number of resamples + 1 for final model
for(i in 1:10) nn.seeds[[i]] <- sample.int(n=1000, 9) # 9 is the number of tuning parameter combinations
nn.seeds[[11]] <- 1 # for the last model
remove(i)
nn.seeds
install.packages("psych")
expand.grid(.size=c(5,10,15), .decay=c(0.001,0.01,0.1))
nn.Grid <- expand.grid(.size=c(5,10,15), .decay=c(0.001,0.01,0.1))
# Set the seeds
# Necessary for reproducibility because we're using parallel processing
set.seed(1)
nn.seeds <- vector(mode = "list", length = 11) # number of resamples + 1 for final model
for(i in 1:10) nn.seeds[[i]] <- sample.int(n=1000, 9) # 9 is the number of tuning parameter combinations
nn.seeds[[11]] <- 1 # for the last model
remove(i)
nn.seeds
library(pROC)
nn.Control <- trainControl(method = "repeatedcv", # use N-fold cross validation
number = 5, # the number of folds
repeats = 2,
classProbs = TRUE, summaryFunction = twoClassSummary,
seeds = nn.seeds)
library(doParallel)
cl = makeCluster(6)
registerDoParallel(cl)
#Fit model
model.nn <- train(y ~ .,
data=train_woe,
method='nnet',
maxit = 1000,
linout = FALSE,
trControl = nn.Control,
tuneGrid = nn.Grid,
metric = "Sens",
allowParallel = TRUE)
train_woe <- train_woe[,y := ifelse(y ==1,"good","bad")]
test_woe <- test_woe[,y := ifelse(y ==1,"good","bad")]
model.nn <- train(y ~ .,
data=train_woe,
method='nnet',
maxit = 1000,
linout = FALSE,
trControl = nn.Control,
tuneGrid = nn.Grid,
metric = "Sens",
allowParallel = TRUE)
trainIndex <- createDataPartition(loan_m$y, p = .1,
list = FALSE,
times = 1)
loan_mp <- loan_m[trainIndex,]
break_adj = list(
loan_amnt=c(8500,14000,20500))
bins_adj = woebin(
loan_mp, y="y",
breaks_list=break_adj,
print_step=0)
woebin_plot(bins_adj$loan_amnt)
set.seed(6715)
trainIndex <- createDataPartition(loan_mp$y, p = .85,
list = FALSE,
times = 1)
loan_mTrain <- loan_mp[ trainIndex,]
loan_mTest  <- loan_mp[-trainIndex,]
knitr::kable(Desc(loan_mTrain$y)[[1]][["freq"]])
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
train_woe <- train_woe[,y := ifelse(y ==1,"good","bad")]
test_woe <- test_woe[,y := ifelse(y ==1,"good","bad")]
model.nn <- train(y ~ .,
data=train_woe,
method='nnet',
maxit = 1000,
linout = FALSE,
trControl = nn.Control,
tuneGrid = nn.Grid,
metric = "Sens",
allowParallel = TRUE)
cl = makeCluster(4)
registerDoParallel(cl)
cl
modelControl <- trainControl(method = "repeatedcv", # use N-fold cross validation
number = 5, # the number of folds
repeats = 2,
classProbs = TRUE, summaryFunction = twoClassSummary,
seeds = nn.seeds)
rfGrid <- expand.grid(mtry = seq(from = 3, to = 18, by = 3))
m_rf <- train(train_woe[, -1], train_woe$y,
method="rf",
ntree=100,
importance=TRUE,
na.action=na.omit,
tuneGrid = rfGrid,
trControl= modelControl,
metric = "ROC",
allowParallel=TRUE)
summary(m_rf)
set.seed(6517)
m_gbm <- train(y ~ ., data=train_woe,method="gbm",
trControl=modelControl,metric = "ROC")
summary(m_gbm)
m_glm <- train(y ~ ., data=train_woe,method="glm",family=binomial(link='logit'),
trControl=modelControl, metric = "ROC")
summary(m_glm)
result <- resamples(list(glm = m_glm,rf = m_rf,gbm = m_gbm))
bwplot(result, metric="ROC")
bwplot(result, metric="Sens")
bwplot(result, metric="ROC")
result$values
train_pred = predict(m_gbm, type='response', train_woe)
train_pred = predict(m_gbm, train_woe)
test_pred = predict(m_gbm,  test_woe)
perf_train = perf_eva(train_woe$creditability, train_pred, title="train")
perf_train = perf_eva(train_woe$y, train_pred, title="train")
train_pred
perf_train = perf_eva(train_woe$y, train_pred)
train_woe$y
perf_train = perf_eva(train_woe$y, train_pred)
library(pROC)
auc <- roc(test_woe[,y], test_pred)
test_woe[,y]
test_pred
test_pred = predict(m_gbm,  test_woe)
train_pred = predict(m_rf, train_woe)
test_pred = predict(m_rf,  test_woe)
test_pred
test_pred = predict(m_glm,  test_woe)
test_pred
unique(test_pred)
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
m_glm <- glm(y ~.,train_woe,family = "binomial")
test_pred = predict(m_glm,  test_woe)
auc <- roc(test_woe[,y], test_pred)
auc
View(loan_mTrain)
train_woe <- train_woe[,y := ifelse(y ==1,"good","bad")]
test_woe <- test_woe[,y := ifelse(y ==1,"good","bad")]
View(train_woe)
train_woe <- train_woe[,y := ifelse(y ==1,"good","bad")][,y := factor(y)]
test_woe <- test_woe[,y := ifelse(y ==1,"good","bad")][,y := factor(y)]
m_rf <- randomForest(y ~.,train_woe,ntree = 100)
library(randomForest)
m_rf <- randomForest(y ~.,train_woe,ntree = 100)
train_woe <- train_woe[,y := ifelse(y ==1,"good","bad")][,y := factor(y)]
test_woe <- test_woe[,y := ifelse(y ==1,"good","bad")][,y := factor(y)]
m_rf <- randomForest(y ~.,train_woe,ntree = 100)
class(train_woe$y)
Desc(train_woe$y)
Desc(loan_m$y)
set.seed(6715)
trainIndex <- createDataPartition(loan_mp$y, p = .85,
list = FALSE,
times = 1)
loan_mTrain <- loan_mp[ trainIndex,]
loan_mTest  <- loan_mp[-trainIndex,]
knitr::kable(Desc(loan_mTrain$y)[[1]][["freq"]])
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
train_woe <- train_woe[,y := ifelse(y ==1,"good","bad")][,y := factor(y,levels = c("good","bad"))]
Desc(train_woe$y)
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
Desc(train_woe$y)
train_woe <- train_woe[,y := ifelse(y ==1,"bad","good")][,y := factor(y,levels = c("good","bad"))]
test_woe <- test_woe[,y := ifelse(y ==1,"bad","good")][,y := factor(y,levels = c("good","bad"))]
Desc(train_woe$y)
m_rf <- randomForest(y ~.,train_woe,ntree = 100)
result <- resamples(list(glm = m_glm,rf = m_rf))
summary(m_rf)
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
train_woe <- train_woe[,y := ifelse(y ==1,"bad","good")][,y := factor(y,levels = c("good","bad"))]
test_woe <- test_woe[,y := ifelse(y ==1,"bad","good")][,y := factor(y,levels = c("good","bad"))]
library(pROC)
modelControl <- trainControl(method = "repeatedcv", number = 5, repeats = 2,
classProbs = TRUE, summaryFunction = twoClassSummary,
seeds = nn.seeds)
# glm
set.seed(6517)
m_glm <- train(y ~ ., data=train_woe,method="glm",family=binomial(link='logit'),
trControl=modelControl, metric = "ROC")
summary(m_glm)
# rf
rfGrid <- expand.grid(mtry = seq(from = 3, to = 18, by = 3))
set.seed(6517)
m_rf <- train(train_woe[, -1], train_woe$y,
method="rf",
ntree=100,
na.action=na.omit,
tuneGrid = rfGrid,
trControl= modelControl)
summary(m_rf)
train_pred = predict(m_rf, train_woe)
train_pred
test_woe = predict(m_rf, test_woe)
roc(test_woe[,y], test_pred)
auc <- roc(test_woe[,c("y")], test_pred)
test_woe[,c("y")]
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
result <- resamples(list(glm = m_glm,rf = m_rf,gbm = m_gbm))
bwplot(result, metric="Sen")
bwplot(result, metric="Sens")
train_pred = predict(m_glm, train_woe)
test_pred = predict(m_glm, test_woe)
train_pred
test_pred
unique(test_pred)
train_pred = predict(m_glm, train_woe)
test_pred = predict(m_glm, test_woe)
unique(train_pred)
train_pred = predict(m_rf, train_woe)
test_pred = predict(m_rf, test_woe)
unique(train_pred)
Desc(train_pred)
Desc(test_pred)
m_glm <- glm(y ~.,train_woe,family = "binomial")
m_rf <- randomForest(y ~.,train_woe,ntree = 100)
train_pred = predict(m_glm, train_woe)
test_pred = predict(m_glm, test_woe)
Desc(train_pred)
train_pred = predict(m_rf, train_woe)
test_pred = predict(m_rf, test_woe)
Desc(test_pred)
test_pred
View(test_woe)
train_woe = woebin_ply(
loan_mTrain, bins_adj)
test_woe = woebin_ply(
loan_mTest, bins_adj)
train_woe <- train_woe[,y := ifelse(y ==1,"bad","good")][,y := factor(y,levels = c("good","bad"))]
test_woe <- test_woe[,y := ifelse(y ==1,"bad","good")][,y := factor(y,levels = c("good","bad"))]
m_glm <- glm(y ~.,train_woe,family = "binomial")
m_rf <- randomForest(y ~.,train_woe,ntree = 100)
train_pred = predict(m_rf, train_woe)
test_pred = predict(m_rf, test_woe)
Desc(test_pred)
summary(m_glm)
